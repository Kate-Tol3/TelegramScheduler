package org.example.storage.service

import org.example.storage.model.Group
import org.example.storage.model.Subscription
import org.example.storage.model.User
import org.example.storage.repository.GroupRepository
import org.example.storage.repository.SubscriptionRepository
import org.springframework.stereotype.Service

@Service
class SubscriptionService(
    private val subscriptionRepository: SubscriptionRepository,
    private val groupRepository: GroupRepository // ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–æ
) {

    fun findAll(): List<Subscription> = subscriptionRepository.findAll()

    fun subscribe(user: User, group: Group): Boolean {
        val loadedGroup = groupRepository.findByNameWithUsers(group.name, group.chatId)
            ?: return false // –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å—é)

        println("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ '${loadedGroup.name}'")
        println("üîí isPrivate: ${loadedGroup.isPrivate}")
        println("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username} (id=${user.id})")
        println("üßë‚Äçü§ù‚Äçüßë allowedUsers:")
        loadedGroup.allowedUsers.forEach {
            println("   - ${it.username} (id=${it.id})")
        }
        println("üëë –í–ª–∞–¥–µ–ª–µ—Ü: ${loadedGroup.owner?.username} (id=${loadedGroup.owner?.id})")

        // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        if (
            loadedGroup.isPrivate &&
            loadedGroup.allowedUsers.none { it.id == user.id } &&
            loadedGroup.owner?.id != user.id
        ) {
            println("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ allowedUsers –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
            return false
        }



        val existing = subscriptionRepository.findByUserAndGroup(user, loadedGroup)
        if (existing != null) return false

        val subscription = Subscription(
            user = user,
            group = loadedGroup,
            groupName = loadedGroup.name
        )

        subscriptionRepository.save(subscription)
        return true
    }



    fun unsubscribe(user: User, group: Group): Boolean {
        val existing = subscriptionRepository.findByUserAndGroup(user, group)
        return if (existing != null) {
            subscriptionRepository.delete(existing)
            true
        } else false
    }

    fun findByUser(user: User): List<Subscription> = subscriptionRepository.findByUser(user)

    /**
     * ‚úÖ –¢–µ–ø–µ—Ä—å –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç allowedUsers –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
     */
    fun findUsersByGroup(group: Group): List<User> {
        return subscriptionRepository.findByGroup(group).map { it.user }.distinct()
    }


    fun findUsersByGroupNameAndChatId(
        groupName: String,
        chatId: String?,
        groupService: GroupService,
        user: User
    ): List<User> {
        val group = groupService.findByName(groupName, chatId, user) ?: return emptyList()
        return findUsersByGroup(group)
    }

    fun findByUserAndGroup(user: User, group: Group): Subscription? =
        subscriptionRepository.findByUserAndGroup(user, group)
}
