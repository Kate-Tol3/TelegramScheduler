package org.example.bot.commands

import org.example.storage.service.GroupService
import org.example.storage.service.UserService
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender

class ListGroupsCommand(
    private val groupService: GroupService,
    private val userService: UserService
) : BotCommand("list_groups", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã") {

    override fun execute(sender: AbsSender, user: User, chat: Chat, arguments: Array<String>) {
        val chatId = chat.id.toString()
        val dbUser = userService.resolveUser(user)
        val allGroups = groupService.findAllWithUsers()

        val globalPublicGroups = allGroups.filter {
            it.chatId == null && !it.isPrivate
        }.sortedBy { it.name }

        val localGroups = allGroups.filter {
            val owner = it.owner

            if (chat.isUserChat) {
                // –í –ª–∏—á–∫–µ: –ª–æ–∫–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                it.chatId != null &&
                        (!it.isPrivate || owner?.id == dbUser.id || dbUser in it.allowedUsers) &&
                        (owner == null || owner.id == dbUser.id)
            } else {
                // –í —á–∞—Ç–µ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü ‚Äî —Ç–æ–ª—å–∫–æ –µ–º—É
                it.chatId == chatId && (owner == null || owner.id == dbUser.id)
            }
        }.sortedBy { it.name }




        val privateGlobalGroups = allGroups.filter {
            it.chatId == null &&
                    it.isPrivate &&
                    (it.owner?.id == dbUser.id || it.allowedUsers.any { u -> u.id == dbUser.id })
        }.sortedBy { it.name }

        val privateLocalGroups = allGroups.filter {
            it.chatId != null &&
                    it.isPrivate &&
                    it.allowedUsers.any { u -> u.id == dbUser.id }
        }.sortedBy { it.name }

        if (
            globalPublicGroups.isEmpty() &&
            localGroups.isEmpty() &&
            privateGlobalGroups.isEmpty() &&
            privateLocalGroups.isEmpty()
        ) {
            sender.execute(SendMessage(chatId, "‚ùóÔ∏è–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º –≥—Ä—É–ø–ø."))
            return
        }

        val builder = StringBuilder()

        if (globalPublicGroups.isNotEmpty()) {
            builder.appendLine("üåê *–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã:*")
            globalPublicGroups.forEach {
                builder.appendLine("\\- `${escape(it.name)}`")
            }
        }

        if (localGroups.isNotEmpty()) {
            builder.appendLine("\nüìç *–õ–æ–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã:*")
            localGroups.forEach {
                val label = buildString {
                    append("`${escape(it.name)}`")
                    if (it.owner?.id == dbUser.id) append(" \\(–≤–∞—à–∞\\)")
                    if (it.isPrivate && it.owner?.id != dbUser.id) append(" \\[–ø—Ä–∏–≤–∞—Ç–Ω–∞—è\\]")
                }
                builder.appendLine("\\- `${escape(it.name)}`")

            }
        }

        if (privateGlobalGroups.isNotEmpty()) {
            builder.appendLine("\nüîí *–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã:*")
            privateGlobalGroups.forEach {
                val label = buildString {
                    append("`${escape(it.name)}`")
                    if (it.owner?.id == dbUser.id) append(" \\(–≤–∞—à–∞\\)")
                }
                builder.appendLine("\\- `${escape(it.name)}`")

            }
        }

        if (privateLocalGroups.isNotEmpty()) {
            builder.appendLine("\nüîê *–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã:*")
            privateLocalGroups.forEach {
                builder.appendLine("\\- `${escape(it.name)}`")
//                builder.appendLine("\\- $label")


            }
        }

        sender.execute(
            SendMessage(chatId, builder.toString().trim()).apply {
                parseMode = "MarkdownV2"
            }
        )
    }

    private fun escape(text: String): String {
        val charsToEscape = listOf("\\", "`", "_", "*", "[", "]", "(", ")", "~", "#", "+", "-", "=", "|", "{", "}", ".", "!")
        return charsToEscape.fold(text) { acc, c -> acc.replace(c, "\\$c") }
    }
}
