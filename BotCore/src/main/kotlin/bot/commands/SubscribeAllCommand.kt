package org.example.bot.commands

import org.example.storage.service.*
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatAdministrators
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton

class SubscribeAllCommand(
    private val userService: UserService,
    private val groupService: GroupService,
    private val subscriptionService: SubscriptionService
) : BotCommand("subscribe_all", "–ü–æ–¥–ø–∏—Å–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏") {

    override fun execute(sender: AbsSender, user: User, chat: Chat, arguments: Array<String>) {
        val isPrivate = chat.isUserChat
        val chatId = chat.id.toString()
        val targetChatId: String

        if (isPrivate) {
            // –í—ã–∑–æ–≤ –∏–∑ –ª–∏—á–∫–∏ ‚Äî –æ–∂–∏–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
            if (arguments.isEmpty()) {
                sender.execute(SendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É. –ü—Ä–∏–º–µ—Ä:\n/subscribe_all https://t.me/groupname"))
                return
            }

            val link = arguments[0].trim()
            if (!link.startsWith("https://t.me/")) {
                sender.execute(SendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è https://t.me/–∏–º—è_–≥—Ä—É–ø–ø—ã"))
                return
            }

            val suffix = link.removePrefix("https://t.me/")
            if (suffix.startsWith("+")) {
                sender.execute(SendMessage(chatId, "‚ùó –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ.\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –≤—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É *–∏–∑ —Å–∞–º–æ–π –≥—Ä—É–ø–ø—ã*."))
                return
            }

            targetChatId = "@$suffix"
        } else {
            // –í—ã–∑–æ–≤ –∏–∑ —Å–∞–º–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
            targetChatId = chatId
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        val isAdmin = try {
            val admins = sender.execute(GetChatAdministrators(targetChatId))
            admins.any { it.user.id == user.id }
        } catch (e: Exception) {
            false
        }

        if (!isAdmin) {
            sender.execute(SendMessage(chatId, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."))
            return
        }

        val group = groupService.findByChatId(targetChatId)
        if (group == null) {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ —Å chatId = $targetChatId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–µ—ë."))
            return
        }

        if (!isPrivate) {
            // –í—ã–∑–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã ‚Äî –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            try {
                val admins = sender.execute(GetChatAdministrators(chatId))
                    .map { it.user }
                    .filter { !it.isBot }

                var count = 0
                for (tgUser in admins) {
                    val userModel = userService.resolveUser(tgUser)
                    if (subscriptionService.subscribe(userModel, group)) count++
                }

               // sender.execute(SendMessage(chatId, "‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω–æ $count –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ '${group.name}'"))

                // üîò –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                val button = InlineKeyboardButton.builder()
                    .text("üì• –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É ${group.name}")
                    .callbackData("subscribe_group:${group.id}")
                    .build()

                val keyboard = InlineKeyboardMarkup(listOf(listOf(button)))

                sender.execute(
                    SendMessage(chatId, "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É *${group.name}*, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
                        .apply {
                            enableMarkdown(true)
                            replyMarkup = keyboard
                        }
                )

            } catch (e: Exception) {
                sender.execute(SendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: ${e.message}"))
            }
        }

    }
}
