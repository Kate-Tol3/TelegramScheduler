package org.example.bot.commands

import org.example.storage.service.GroupService
import org.example.storage.service.SubscriptionService
import org.example.storage.service.UserService
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender

class RevokeAccessCommand(
    private val userService: UserService,
    private val groupService: GroupService,
    private val subscriptionService: SubscriptionService
) : BotCommand("revoke_access", "–û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ") {

    override fun execute(sender: AbsSender, user: User, chat: Chat, arguments: Array<String>) {
        val chatId = chat.id.toString()

        if (arguments.size < 2) {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /revoke_access <–≥—Ä—É–ø–ø–∞> @username"))
            return
        }

        val rawUsername = arguments.last().removePrefix("@").trim()
        val rawGroupName = arguments.dropLast(1).joinToString(" ").trim()

        val groupName = rawGroupName.trim()


        val requester = userService.resolveUser(user)
        val group = groupService.findByName(groupName, chatId, requester)

        println("üîç –û—Ç–∑—ã–≤ –¥–æ—Å—Ç—É–ø–∞:")
        println("üë§ –ó–∞–ø—Ä–æ—Å –æ—Ç: ${requester.username}")
        println("üë• –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: $groupName")
        println("üéØ –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @$rawUsername")

        if (group == null || !group.isPrivate) {
            sender.execute(SendMessage(chatId, "‚ùå –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ '${escape(groupName)}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."))
            return
        }

        if (group.owner?.id != requester.id) {
            sender.execute(SendMessage(chatId, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ—Ç–∑—ã–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ '${escape(group.name)}'."))
            return
        }

        val targetUser = userService.findByUsername(rawUsername)
        if (targetUser == null) {
            sender.execute(SendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @$rawUsername –Ω–µ –Ω–∞–π–¥–µ–Ω."))
            return
        }

        val hadAccess = group.allowedUsers.removeIf { it.id == targetUser.id }
        group.notifiers.removeIf { it.id == targetUser.id }

        val unsubscribed = subscriptionService.unsubscribe(targetUser, group)
        if (unsubscribed) {
            println("üì§ –¢–∞–∫–∂–µ –æ—Ç–ø–∏—Å–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –≥—Ä—É–ø–ø—ã")
        }

        if (!hadAccess) {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @$rawUsername –Ω–µ –∏–º–µ–ª –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ '${escape(group.name)}'."))
            return
        }

        groupService.save(group)
        sender.execute(SendMessage(chatId, "‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @$rawUsername –∫ –≥—Ä—É–ø–ø–µ '${escape(group.name)}' –æ—Ç–æ–∑–≤–∞–Ω."))
    }

    private fun escape(text: String): String {
        val charsToEscape = listOf('_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!')
        return charsToEscape.fold(text) { acc, c -> acc.replace(c.toString(), "\\$c") }
    }
}
