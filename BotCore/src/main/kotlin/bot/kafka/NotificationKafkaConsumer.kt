package org.example.bot.kafka

import com.fasterxml.jackson.databind.ObjectMapper
import org.apache.kafka.clients.consumer.ConsumerRecord
import org.example.bot.sender.NotificationSender
import org.example.messaging.dto.NotificationMessage
import org.example.storage.service.GroupService
import org.springframework.kafka.annotation.KafkaListener
import org.springframework.stereotype.Component
import org.telegram.telegrambots.meta.bots.AbsSender

@Component
class NotificationKafkaConsumer(
    private val objectMapper: ObjectMapper,
    private val notificationSender: NotificationSender,
    private val groupService: GroupService,
    private val absSender: AbsSender // Telegram –±–æ—Ç
) {

    @KafkaListener(topics = ["notification-send"], groupId = "bot-group")
    fun consume(record: ConsumerRecord<String, String>) {
        val message = try {
            objectMapper.readValue(record.value(), NotificationMessage::class.java)
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka: ${e.message}")
            return
        }

        println("üì® –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ Kafka: $message")

        val group = groupService.findByName(message.groupName, message.chatId)
        if (group == null) {
            println("‚ö† –ì—Ä—É–ø–ø–∞ '${message.groupName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ ${message.chatId}")
            return
        }

        val chatIdStr = group.chatId
        if (chatIdStr.isNullOrBlank()) {
            println("‚ö† –£ –≥—Ä—É–ø–ø—ã '${group.name}' –Ω–µ—Ç chatId")
            return
        }

        val chatId = try {
            chatIdStr.toLong()
        } catch (e: NumberFormatException) {
            println("‚ùå chatId –≥—Ä—É–ø–ø—ã '${group.name}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: $chatIdStr")
            return
        }

        notificationSender.sendToGroups(absSender, listOf(chatId), message.text)
    }
}
