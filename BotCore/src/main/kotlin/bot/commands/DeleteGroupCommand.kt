package org.example.bot.commands

import org.example.storage.service.GroupService
import org.example.storage.service.SubscriptionService
import org.example.storage.service.UserService
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender

class DeleteGroupCommand(
    private val groupService: GroupService,
    private val subscriptionService: SubscriptionService,
    private val userService: UserService
) : BotCommand("delete_group", "–£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É") {

    override fun execute(sender: AbsSender, user: User, chat: Chat, arguments: Array<String>) {
        val chatId = chat.id.toString()

        if (arguments.isEmpty()) {
            sender.execute(
                SendMessage(chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä:\n`/delete_group backend`")
                    .apply { enableMarkdown(true) }
            )
            return
        }

        val groupName = arguments.joinToString(" ").trim()
        val dbUser = userService.resolveUser(user)

        val group = groupService.findByName(groupName, if (chat.isUserChat) null else chatId, dbUser)

        if (group == null) {
            sender.execute(SendMessage(chatId, "‚ùå –ì—Ä—É–ø–ø–∞ *$groupName* –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
                .apply { enableMarkdown(true) })
            return
        }

        // üîí –ó–∞–ø—Ä–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø
        if (group.chatId == null && !group.isPrivate) {
            sender.execute(SendMessage(chatId, "‚õî –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ *$groupName* –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞.")
                .apply { enableMarkdown(true) })
            return
        }

        // üîí –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—É—é –≥—Ä—É–ø–ø—É
        if (group.owner?.id != dbUser.id) {
            sender.execute(SendMessage(chatId, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É *$groupName*.").apply { enableMarkdown(true) })
            return
        }

        val subscribers = subscriptionService.findUsersByGroup(group).filter { it.id != dbUser.id }

        if (subscribers.isNotEmpty()) {
            sender.execute(
                SendMessage(chatId, """
                    ‚ö†Ô∏è –ù–∞ –≥—Ä—É–ø–ø—É *$groupName* –≤—Å—ë –µ—â—ë –ø–æ–¥–ø–∏—Å–∞–Ω—ã –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (${subscribers.size}).
                    –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ—ë, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:  
                    `/delete_group $groupName confirm`
                """.trimIndent()).apply { enableMarkdown(true) }
            )
            return
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –≤—Å—ë –µ—â—ë –µ—Å—Ç—å
        if (arguments.size >= 2 && arguments[1] != "confirm") {
            sender.execute(SendMessage(chatId, "‚ùó –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–æ–±–∞–≤—å—Ç–µ `confirm` –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏.").apply { enableMarkdown(true) })
            return
        }

        groupService.delete(group)
        sender.execute(SendMessage(chatId, "‚úÖ –ì—Ä—É–ø–ø–∞ *$groupName* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.").apply { enableMarkdown(true) })
    }
}
