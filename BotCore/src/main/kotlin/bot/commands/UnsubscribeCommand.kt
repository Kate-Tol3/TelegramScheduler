package org.example.bot.commands

import org.example.storage.service.GroupService
import org.example.storage.service.SubscriptionService
import org.example.storage.service.UserService
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender

class UnsubscribeCommand(
    private val userService: UserService,
    private val groupService: GroupService,
    private val subscriptionService: SubscriptionService
) : BotCommand("unsubscribe", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã") {

    override fun execute(sender: AbsSender, user: User, chat: Chat, arguments: Array<String>) {
        val chatId = chat.id.toString()

        if (arguments.isEmpty()) {
            sender.execute(SendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: /unsubscribe <group>"))
            return
        }

        val groupName = arguments.joinToString(" ").trim()
        val dbUser = userService.resolveUser(user)

        println("üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏:")
        println("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${dbUser.username} (id=${dbUser.telegramId})")
        println("üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: $groupName")
        println("üí¨ –û—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: chatId=$chatId")
        println("üí¨ Chat type: ${chat.type}")

        // –î–ª—è –õ–° –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ)
        val contextChatId = if (chat.isUserChat) null else chatId

        val group = groupService.findByName(groupName, contextChatId, dbUser)

        if (group == null) {
            println("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
            sender.execute(SendMessage(chatId, "‚ùå –ì—Ä—É–ø–ø–∞ '$groupName' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."))
            return
        }

        val unsubscribed = subscriptionService.unsubscribe(dbUser, group)
        val message = if (unsubscribed) {
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≥—Ä—É–ø–ø—ã '${group.name}'."
        } else {
            "‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—É '${group.name}'."
        }

        println("üì© $message")
        sender.execute(SendMessage(chatId, message))
    }
}
