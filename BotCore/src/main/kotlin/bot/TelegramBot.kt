package org.example.bot

import jakarta.annotation.PostConstruct
import org.example.bot.commands.*
import org.example.bot.sender.NotificationSender
import org.example.bot.service.BotContextService
import org.example.storage.service.*
import org.springframework.stereotype.Component
import org.telegram.telegrambots.extensions.bots.commandbot.TelegramLongPollingCommandBot
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatAdministrators
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Update
import java.util.*

@Component
class TelegramBot(
    private val botProperties: BotProperties,
    private val userService: UserService,
    private val groupService: GroupService,
    private val subscriptionService: SubscriptionService,
    private val templateService: TemplateService,
    private val eventService: EventService,
    private val scheduledNotificationService: ScheduledNotificationService,
    private val notificationSender: NotificationSender,
    private val botContextService: BotContextService,
) : TelegramLongPollingCommandBot() {

    override fun getBotUsername(): String = botProperties.username
    override fun getBotToken(): String = botProperties.token

    @PostConstruct
    fun registerCommands() {
        // ‚úÖ –û–±—â–∏–µ
        register(StartCommand(groupService, subscriptionService, userService))
        register(HelpCommand())

        // ‚úÖ –†–∞–±–æ—Ç–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏
        register(CreateGroupCommand(groupService, subscriptionService, userService))
        register(DeleteGroupCommand(groupService, subscriptionService, userService))
        register(ListGroupsCommand(groupService, userService))

        // ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏
        register(SubscribeCommand(userService, groupService, subscriptionService))
        register(UnsubscribeCommand(userService, groupService, subscriptionService))
        register(MySubscriptionsCommand(userService, subscriptionService))
        register(SubscribeAllCommand(userService, groupService, subscriptionService)) // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å
        register(MyChatsCommand(groupService)) // –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞

        // ‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
        register(GrantAccessCommand(userService, groupService))
        register(RevokeAccessCommand(userService, groupService, subscriptionService))
        register(GrantNotifyRightsCommand(userService, groupService))
        register(RevokeNotifyRightsCommand(userService, groupService))
        register(AllowedUsersCommand(groupService, userService))

        // ‚úÖ –®–∞–±–ª–æ–Ω—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        register(ListTemplatesCommand(templateService)) // –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞

        // ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        register(
            NotifyImmediateCommand(
                eventService,
                templateService,
                userService,
                groupService,
                subscriptionService,
                notificationSender
            )
        )
        register(
            NotifyScheduleCommand(
                eventService,
                templateService,
                scheduledNotificationService,
                groupService,
                userService,
                subscriptionService
            )
        )
    }

    override fun processNonCommandUpdate(update: Update) {
        if (update.hasCallbackQuery()) {
            processCallbackQuery(update)
            return
        }

        val message = update.message ?: return
        val chat = message.chat
        val chatId = chat.id.toString()

        // üü¢ –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if (chat.isGroupChat || chat.isSuperGroupChat) {
            val groupName = chat.title ?: "–≥—Ä—É–ø–ø–∞-${chatId.takeLast(6)}"
            val existing = groupService.findByName(groupName, chatId, null) // ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

            if (existing == null) {
                val group = groupService.createGroup(
                    name = groupName,
                    description = "–ì—Ä—É–ø–ø–∞ Telegram $groupName",
                    chatId = chatId
                )

                try {
                    val admins = execute(GetChatAdministrators(chatId))
                    for (admin in admins) {
                        val tgUser = admin.user
                        if (!tgUser.isBot) {
                            val user = userService.resolveUser(tgUser)
                            subscriptionService.subscribe(user, group)
                        }
                    }
                    println("‚úÖ –ì—Ä—É–ø–ø–∞ '$groupName' —Å–æ–∑–¥–∞–Ω–∞ –∏ –∞–¥–º–∏–Ω—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã")
                } catch (e: Exception) {
                    println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤: ${e.message}")
                }
            }
        }


        val text = message.text ?: return
        if (!text.startsWith("/")) {
            execute(SendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."))
        }
    }

    private fun processCallbackQuery(update: Update) {
        val callback = update.callbackQuery ?: return
        val data = callback.data ?: return
        val user = callback.from
        val message = callback.message ?: return
        val chatId = message.chatId.toString()

        if (data.startsWith("subscribe_group:")) {
            val groupId = data.removePrefix("subscribe_group:")
            val group = try {
                groupService.findById(UUID.fromString(groupId))
            } catch (e: IllegalArgumentException) {
                execute(
                    AnswerCallbackQuery.builder()
                        .callbackQueryId(callback.id)
                        .text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.")
                        .showAlert(true)
                        .build()
                )
                return
            }

            if (group == null) {
                execute(
                    AnswerCallbackQuery.builder()
                        .callbackQueryId(callback.id)
                        .text("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                        .showAlert(true)
                        .build()
                )
                return
            }

            val userModel = userService.resolveUser(user)
            val subscribed = subscriptionService.subscribe(userModel, group)

            val feedback = if (subscribed) {
                "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É '${group.name}'"
            } else {
                "‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—É '${group.name}'"
            }

            // –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            execute(
                AnswerCallbackQuery.builder()
                    .callbackQueryId(callback.id)
                    .text(feedback)
                    .showAlert(false)
                    .build()
            )

            // –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–∫–∞
            if (!message.chat.isUserChat) {
                execute(SendMessage(chatId, feedback))
            }
        }
    }

    override fun processInvalidCommandUpdate(update: Update?) {
        val message = update?.message ?: return
        val chatId = message.chatId.toString()
        val command = message.text ?: return

        val reply = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        execute(SendMessage(chatId, reply))
    }


}
