package org.example.bot.kafka

import com.fasterxml.jackson.databind.ObjectMapper
import org.apache.kafka.clients.consumer.ConsumerRecord
import org.example.bot.sender.NotificationSender
import org.example.messaging.dto.NotificationMessage
import org.example.storage.service.GroupService
import org.example.storage.service.SubscriptionService
import org.springframework.kafka.annotation.KafkaListener
import org.springframework.stereotype.Component
import org.telegram.telegrambots.meta.bots.AbsSender

@Component
class NotificationKafkaConsumer(
    private val objectMapper: ObjectMapper,
    private val notificationSender: NotificationSender,
    private val groupService: GroupService,
    private val subscriptionService: SubscriptionService,
    private val absSender: AbsSender // Telegram –±–æ—Ç
) {

    @KafkaListener(topics = ["notification-send"], groupId = "bot-group")
    fun consume(record: ConsumerRecord<String, String>) {
        val message = try {
            objectMapper.readValue(record.value(), NotificationMessage::class.java)
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka: ${e.message}")
            return
        }

        println("üì® –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ Kafka: $message")

        val group = groupService.findByName(message.groupName, message.chatId)
            ?: groupService.findByName(message.groupName, null)

        if (group == null) {
            println("‚ùå –ì—Ä—É–ø–ø–∞ '${message.groupName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        }

        if (group.chatId == null) {
            // üîπ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç —á–∞—Ç, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞
            val chatId = message.chatId?.toString()?.toLongOrNull()
            if (chatId == null) {
                println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chatId –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã: ${message.chatId}")
                return
            }

            notificationSender.sendToGroups(absSender, listOf(chatId), message.text)

        } else {
            // üî∏ –ö–∞—Å—Ç–æ–º–Ω–∞—è –≥—Ä—É–ø–ø–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            val users = subscriptionService.findUsersByGroup(group)
            val userIds = users.mapNotNull { it.telegramId?.toString()?.toLongOrNull() }

            if (userIds.isEmpty()) {
                println("‚ö† –£ –≥—Ä—É–ø–ø—ã '${group.name}' –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                return
            }

            notificationSender.sendToGroups(absSender, userIds, message.text)
        }

    }


}
