package org.example.bot.commands

import org.example.storage.service.GroupService
import org.example.storage.service.ScheduledNotificationService
import org.example.storage.service.SubscriptionService
import org.example.storage.service.UserService
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender

class DeleteGroupCommand(
    private val groupService: GroupService,
    private val subscriptionService: SubscriptionService,
    private val scheduledNotificationService: ScheduledNotificationService,
    private val userService: UserService
) : BotCommand("delete_group", "–£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É") {

    override fun execute(sender: AbsSender, user: User, chat: Chat, arguments: Array<String>) {
        val chatId = chat.id.toString()

        if (arguments.isEmpty()) {
            sender.execute(
                SendMessage(chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä:\n/delete_group backend")
                    .apply { enableMarkdown(true) }
            )
            return
        }

        val isConfirmed = arguments.lastOrNull()?.lowercase() == "confirm"
        val groupName = if (isConfirmed) {
            arguments.dropLast(1).joinToString(" ").trim()
        } else {
            arguments.joinToString(" ").trim()
        }

        val dbUser = userService.resolveUser(user)
        val contextChatId = chatId
        var group = groupService.findByName(groupName, contextChatId, dbUser)

        if (group == null && contextChatId != null) {
            val fallback = groupService.findByNameWithUsers(groupName, contextChatId)
            if (fallback != null && fallback.owner?.id == dbUser.id) {
                println("üîÅ Fallback: –Ω–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${dbUser.username}")
                group = fallback
            }
        }


        if (group == null) {
            sender.execute(
                SendMessage(chatId, "‚ùå –ì—Ä—É–ø–ø–∞ *${escape(groupName)}* –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
                    .apply { enableMarkdown(true) }
            )
            return
        }


        if (group.chatId == null && !group.isPrivate) {
            sender.execute(
                SendMessage(chatId, "‚õî –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ *${escape(group.name)}* –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞.")
                    .apply { enableMarkdown(true) }
            )
            return
        }

        if (group.owner?.telegramId != user.id) {
            sender.execute(
                SendMessage(chatId, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É *${escape(group.name)}*.").apply {
                    enableMarkdown(true)
                }
            )
            return
        }

        val subscribers = subscriptionService.findUsersByGroup(group).filter { it.telegramId != user.id }
        val notifications = scheduledNotificationService.findAllWithGroup(group)

        if ((subscribers.isNotEmpty() || notifications.isNotEmpty()) && !isConfirmed) {
            val warning = buildString {
                if (subscribers.isNotEmpty()) {
                    append("‚ö†Ô∏è –ù–∞ –≥—Ä—É–ø–ø—É *${escape(group.name)}* –≤—Å—ë –µ—â—ë –ø–æ–¥–ø–∏—Å–∞–Ω—ã –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (${subscribers.size}).\n")
                }
                if (notifications.isNotEmpty()) {
                    append("‚ö†Ô∏è –° –Ω–µ–π —Å–≤—è–∑–∞–Ω–æ ${notifications.size} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –û–Ω–∏ —Ç–æ–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n")
                }
                append("\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ—ë, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n")
                append("/delete_group ${group.name} confirm")
            }

            sender.execute(SendMessage(chatId, warning).apply { enableMarkdown(true) })
            return
        }

        // –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å–∫–∏
        scheduledNotificationService.deleteAllByGroup(group)
        subscriptionService.deleteAllByGroup(group)
        groupService.delete(group)

        sender.execute(
            SendMessage(chatId, "‚úÖ –ì—Ä—É–ø–ø–∞ *${escape(group.name)}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.").apply { enableMarkdown(true) }
        )
    }

    private fun escape(text: String): String {
        val charsToEscape = listOf('_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!')
        return charsToEscape.fold(text) { acc, c -> acc.replace(c.toString(), "\\$c") }
    }
}
