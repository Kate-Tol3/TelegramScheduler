package org.example.bot.commands

import org.example.storage.service.GroupService
import org.example.storage.service.UserService
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender

class GrantNotifyRightsCommand(
    private val userService: UserService,
    private val groupService: GroupService
) : BotCommand("grant_notify_rights", "–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É") {

    override fun execute(sender: AbsSender, user: User, chat: Chat, arguments: Array<String>) {
        val chatId = chat.id.toString()

        if (arguments.size < 2) {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /grant_notify_rights <–≥—Ä—É–ø–ø–∞> @username"))
            return
        }

        val groupName = arguments[0].trim()
        val username = arguments[1].removePrefix("@").trim()
        val requester = userService.resolveUser(user)

        val contextChatId = if (chat.isUserChat) null else chatId
        val group = groupService.findByName(groupName, contextChatId, requester)

        if (group == null) {
            sender.execute(SendMessage(chatId, "‚ùå –ì—Ä—É–ø–ø–∞ '${escape(groupName)}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."))
            return
        }

        if (group.owner?.id != requester.id) {
            sender.execute(SendMessage(chatId, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."))
            return
        }

        val targetUser = userService.findByUsername(username)
        if (targetUser == null) {
            sender.execute(SendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @$username –Ω–µ –Ω–∞–π–¥–µ–Ω."))
            return
        }

        if (!group.allowedUsers.contains(targetUser)) {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ /grant_access."))
            return
        }

        if (group.notifiers.contains(targetUser)) {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @$username —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."))
            return
        }

        // üîÅ –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∏ —ç—Ç–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è ‚Äî –¥–µ–ª–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–π
        if (!group.isPrivate && group.chatId != null && targetUser != group.owner) {
            println("üîÅ –ì—Ä—É–ø–ø–∞ '${group.name}' —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–π (chatId = null, isPrivate = true)")
            group.chatId = null
            group.isPrivate = true
        }

        val updatedGroup = groupService.grantNotifyRights(group, targetUser)

        println("‚úÖ @$username (id=${targetUser.telegramId}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ notifiers –≥—Ä—É–ø–ø—ã '${group.name}'")
        println("‚úÖ –¢–µ–∫—É—â–∏–µ notifiers: ${updatedGroup.notifiers.map { it.username }}")

        sender.execute(SendMessage(chatId, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @$username —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É '${escape(groupName)}'."))
    }

    private fun escape(text: String): String {
        val charsToEscape = listOf('_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!')
        var result = text
        for (char in charsToEscape) {
            result = result.replace(char.toString(), "\\$char")
        }
        return result
    }
}
