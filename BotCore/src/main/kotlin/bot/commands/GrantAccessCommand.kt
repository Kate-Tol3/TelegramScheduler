package org.example.bot.commands

import org.example.storage.service.GroupService
import org.example.storage.service.UserService
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender

class GrantAccessCommand(
    private val userService: UserService,
    private val groupService: GroupService
) : BotCommand("grant_access", "–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ") {

    override fun execute(sender: AbsSender, user: User, chat: Chat, arguments: Array<String>) {
        val chatId = chat.id.toString()

        if (arguments.size < 2) {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /grant_access <–≥—Ä—É–ø–ø–∞> @username"))
            return
        }

        val groupName = arguments[0].trim()
        val username = arguments[1].removePrefix("@").trim()
        val requester = userService.resolveUser(user)

        val contextChatId = if (chat.isUserChat) {
            groupService.findByOwnerGroupName(requester, groupName)?.chatId
        } else {
            chat.id.toString()
        }
        val group = groupService.findByName(groupName, contextChatId, requester)


        if (group == null) {
            sender.execute(SendMessage(chatId, "‚ùå –ì—Ä—É–ø–ø–∞ '${escape(groupName)}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."))
            return
        }

        if (group.owner?.id != requester.id) {
            sender.execute(SendMessage(chatId, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º –∫ –≥—Ä—É–ø–ø–µ '${escape(groupName)}'."))
            return
        }

        val targetUser = userService.findByUsername(username)
        if (targetUser == null) {
            sender.execute(SendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @$username –Ω–µ –Ω–∞–π–¥–µ–Ω."))
            return
        }

        val alreadyHasAccess = group.allowedUsers.contains(targetUser)
        if (alreadyHasAccess) {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @$username —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ '${escape(groupName)}'."))
            return
        }

        // üëâ –í—Å—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞
        val updatedGroup = groupService.grantAccess(group, targetUser)

        sender.execute(SendMessage(chatId, "‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @$username –∫ –≥—Ä—É–ø–ø–µ '${escape(groupName)}' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω."))
    }

    private fun escape(text: String): String {
        val charsToEscape = listOf('_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!')
        return charsToEscape.fold(text) { acc, c -> acc.replace(c.toString(), "\\$c") }
    }
}
