package org.example.bot.commands

import org.example.storage.service.GroupService
import org.example.storage.service.UserService
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender

class RevokeNotifyRightsCommand(
    private val userService: UserService,
    private val groupService: GroupService
) : BotCommand("revoke_notify_rights", "–û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π") {

    override fun execute(sender: AbsSender, user: User, chat: Chat, arguments: Array<String>) {
        val chatId = chat.id.toString()

        if (arguments.size < 2) {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /revoke_notify_rights <–≥—Ä—É–ø–ø–∞> @username"))
            return
        }

        // –í—ã–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        val rawUsername = arguments.last().removePrefix("@").trim()
        val rawGroupName = arguments.dropLast(1).joinToString(" ").trim()

        val groupName = rawGroupName.trim()


        val requester = userService.resolveUser(user)
        val contextChatId = if (chat.isUserChat) null else chatId

        val group = groupService.findByName(groupName, contextChatId, requester)

        println("üö´ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–æ–∑–≤–∞—Ç—å notify-–ø—Ä–∞–≤–∞:")
        println("üë§ –ó–∞–ø—Ä–æ—Å –æ—Ç: ${requester.username} (id=${requester.telegramId})")
        println("üë• –ì—Ä—É–ø–ø–∞: $groupName")
        println("üéØ –¶–µ–ª—å: @$rawUsername")

        if (group == null) {
            sender.execute(SendMessage(chatId, "‚ùå –ì—Ä—É–ø–ø–∞ '${groupName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."))
            return
        }

        if (group.owner?.id != requester.id) {
            sender.execute(SendMessage(chatId, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ—Ç–∑—ã–≤–∞—Ç—å notify-–ø—Ä–∞–≤–∞."))
            return
        }

        val targetUser = userService.findByUsername(rawUsername)
        if (targetUser == null) {
            sender.execute(SendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @$rawUsername –Ω–µ –Ω–∞–π–¥–µ–Ω."))
            return
        }

        val removed = group.notifiers.removeIf { it.id == targetUser.id }

        if (!removed) {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @$rawUsername –Ω–µ –±—ã–ª–æ –ø—Ä–∞–≤ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."))
            return
        }

        groupService.save(group)

        println("‚úÖ –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @$rawUsername –æ—Ç–æ–∑–≤–∞–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã '${group.name}'")
        sender.execute(SendMessage(chatId, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @$rawUsername –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É '${group.name}'."))
    }

    private fun escape(text: String): String {
        val charsToEscape = listOf('_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!')
        return charsToEscape.fold(text) { acc, c -> acc.replace(c.toString(), "\\$c") }
    }
}
