package org.example.bot.commands

import org.example.bot.sender.NotificationSender
import org.example.storage.model.EventType
import org.example.storage.service.*
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatAdministrators
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

class NotifyImmediateCommand(
    private val eventService: EventService,
    private val templateService: TemplateService,
    private val userService: UserService,
    private val groupService: GroupService,
    private val subscriptionService: SubscriptionService,
    private val notificationSender: NotificationSender
) : BotCommand("notify_immediate", "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ") {

    override fun execute(sender: AbsSender, user: User, chat: Chat, args: Array<out String>) {
        val chatId = chat.id.toString()

        if (args.size < 7) {
            sender.execute(SendMessage(chatId, """
                ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:
                /notify_immediate <CALL|MR|RELEASE> <—Å—Å—ã–ª–∫–∞> <–º–µ—Å—Ç–æ> <–≤—Ä–µ–º—è> <–æ–ø–∏—Å–∞–Ω–∏–µ> <chat|private> <–≥—Ä—É–ø–ø–∞>
            """.trimIndent()))
            return
        }

        // üîπ –°–æ–±—ã—Ç–∏–µ
        val eventType = try {
            EventType.valueOf(args[0].uppercase())
        } catch (e: Exception) {
            sender.execute(SendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è. CALL, MR, RELEASE"))
            return
        }

        // üîπ –°—Å—ã–ª–∫–∞
        val link = args[1]

        // üîπ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è
        val timeRegex = Regex("""\d{1,2}:\d{2}""")
        val timeIndex = args.indexOfFirst { timeRegex.matches(it) }

        if (timeIndex == -1 || timeIndex < 3) {
            sender.execute(SendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 14:30"))
            return
        }

        // üîπ –ú–µ—Å—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        val place = args.slice(2 until timeIndex).joinToString(" ")
        val timeStr = args[timeIndex]

        // üîπ –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏ chat|private
        val targetIndex = args.indexOfLast { it.equals("chat", true) || it.equals("private", true) }
        if (targetIndex == -1 || targetIndex == args.lastIndex) {
            sender.execute(SendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ 'chat' –∏–ª–∏ 'private', –∞ –∑–∞—Ç–µ–º ‚Äî –∏–º—è –≥—Ä—É–ø–ø—ã."))
            return
        }

        val description = args.slice(timeIndex + 1 until targetIndex).joinToString(" ")
        val target = args[targetIndex].lowercase()

        // üîß –ì—Ä—É–ø–ø–∞: –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ chat/private
        val groupName = args.drop(targetIndex + 1).joinToString(" ").trim()

        // üîπ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        val eventTime = try {
            val (h, m) = timeStr.split(":").map { it.toInt() }
            LocalDateTime.now().withHour(h).withMinute(m)
        } catch (e: Exception) {
            sender.execute(SendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 14:30"))
            return
        }

        // üîπ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä—É–ø–ø—É
        val dbUser = userService.resolveUser(user)

        val group = groupService.findByName(groupName, chatId, dbUser) { targetChatId ->
            try {
                val admins = sender.execute(GetChatAdministrators(targetChatId))
                admins.any { it.user.id == user.id }
            } catch (e: Exception) {
                println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω—Å—Ç–≤–∞: ${e.message}")
                false
            }
        }

        if (group == null) {
            sender.execute(SendMessage(chatId, "‚ùå –ì—Ä—É–ø–ø–∞ '$groupName' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."))
            return
        }

        // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        val isOwner = group.owner?.id == dbUser.id
        val isNotifier = groupService.isNotifier(group, dbUser)
        if (group.isPrivate && !isOwner && !isNotifier) {
            sender.execute(SendMessage(chatId, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω—É—é –≥—Ä—É–ø–ø—É '${group.name}'."))
            return
        }

        // üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        val subscribers = subscriptionService.findUsersByGroup(group)
        val subscription = subscriptionService.findByUserAndGroup(dbUser, group)
        if (subscription == null) {
            sender.execute(SendMessage(chatId, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—É '${group.name}'"))
            return
        }

        // üìã –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        val template = templateService.findByEventType(eventType)
        if (template == null) {
            sender.execute(SendMessage(chatId, "‚ùå –®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è '$eventType' –Ω–µ –Ω–∞–π–¥–µ–Ω."))
            return
        }

        // üõ† –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        val payload = mapOf(
            "link" to link,
            "place" to place,
            "time" to eventTime.format(DateTimeFormatter.ofPattern("HH:mm")),
            "description" to description
        )

        val event = eventService.createEvent(eventType, payload)
        val message = notificationSender.applyTemplate(template, payload)

        // üì§ –û—Ç–ø—Ä–∞–≤–∫–∞
        when (target) {
            "chat" -> {
                val groupChatId = group.chatId?.toLongOrNull()
                if (groupChatId == null) {
                    sender.execute(SendMessage(chatId, "‚ùå –£ –≥—Ä—É–ø–ø—ã '${group.name}' –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞."))
                    return
                }
                notificationSender.sendToGroups(sender, listOf(groupChatId), message)
                sender.execute(SendMessage(chatId, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –≥—Ä—É–ø–ø—ã '${group.name}'"))
            }

            "private" -> {
                if (subscribers.isEmpty()) {
                    sender.execute(SendMessage(chatId, "‚ö†Ô∏è –í –≥—Ä—É–ø–ø–µ '${group.name}' –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."))
                    return
                }
                notificationSender.sendToUsers(sender, subscribers, message)
                sender.execute(SendMessage(chatId, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–° –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –≥—Ä—É–ø–ø—ã '${group.name}'"))
            }

            else -> {
                sender.execute(SendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ 'chat' –∏–ª–∏ 'private' –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö."))
            }
        }
    }
}
