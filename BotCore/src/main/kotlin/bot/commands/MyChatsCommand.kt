package org.example.bot.commands

import org.example.storage.service.GroupService
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatAdministrators
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender

class MyChatsCommand(
    private val groupService: GroupService
) : BotCommand("my_chats", "–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã, –≥–¥–µ –≤—ã –∞–¥–º–∏–Ω") {

    override fun execute(sender: AbsSender, user: User, chat: Chat, arguments: Array<String>) {
        val allGroups = groupService.findAllWithUsers()
        val userId = user.id
        val adminGroups = mutableListOf<String>()

        for (group in allGroups) {
            val chatId = group.chatId ?: continue
            try {
                val admins = sender.execute(GetChatAdministrators(chatId))
                if (admins.any { it.user.id == userId }) {
                    val displayName = group.name.ifBlank { "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è" }
                    adminGroups += "‚Ä¢ *${escape(displayName)}* (`$chatId`)"
                }
            } catch (_: Exception) {
                // –ë–æ—Ç –Ω–µ –≤ —á–∞—Ç–µ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            }
        }

        val response = if (adminGroups.isEmpty()) {
            "‚ÑπÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ, –≥–¥–µ —Å–æ—Å—Ç–æ–∏—Ç –±–æ—Ç."
        } else {
            """
                üõ°Ô∏è *–í—ã –∞–¥–º–∏–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —á–∞—Ç–∞—Ö, –≥–¥–µ —Å–æ—Å—Ç–æ–∏—Ç –±–æ—Ç:*
                
                ${adminGroups.joinToString("\n")}
                
                üí° –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:
                `/subscribe_all <chat_id>`
                —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–∏—Ö —á–∞—Ç–æ–≤.
            """.trimIndent()
        }

        sender.execute(
            SendMessage(chat.id.toString(), response).apply {
                parseMode = "Markdown"
            }
        )
    }

    private fun escape(text: String): String {
        val special = listOf('_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!')
        return special.fold(text) { acc, char -> acc.replace(char.toString(), "\\$char") }
    }
}
