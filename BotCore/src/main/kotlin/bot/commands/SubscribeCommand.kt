package org.example.bot.commands

import org.example.storage.service.GroupService
import org.example.storage.service.SubscriptionService
import org.example.storage.service.UserService
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender

class SubscribeCommand(
    private val userService: UserService,
    private val groupService: GroupService,
    private val subscriptionService: SubscriptionService
) : BotCommand("subscribe", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É") {

    override fun execute(sender: AbsSender, user: User, chat: Chat, arguments: Array<String>) {
        val chatId = chat.id.toString()

        if (arguments.isEmpty()) {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: /subscribe <group>"))
            return
        }

        val groupName = arguments.joinToString(" ").trim()
        val dbUser = userService.resolveUser(user)
        val contextChatId = if (chat.isUserChat) null else chatId

        println("üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:")
        println("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${dbUser.username} (id=${dbUser.telegramId})")
        println("üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: $groupName")
        println("üí¨ –û—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–æ: chatId=$chatId, –¢–∏–ø: ${chat.type}")

        val group = groupService.findByName(groupName, contextChatId, dbUser)

        if (group == null) {
            sender.execute(SendMessage(chatId, "‚ùå –ì—Ä—É–ø–ø–∞ '$groupName' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."))
            return
        }

        println("üü¢ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ '${group.name}' (chatId=${group.chatId}, isPrivate=${group.isPrivate})")

        val isOwner = group.owner?.id == dbUser.id
        val hasAccess = when {
            isOwner -> true
            group.chatId == chatId -> true
            group.chatId == null && !group.isPrivate -> true
            group.chatId == null && group.isPrivate && group.allowedUsers.any { it.id == dbUser.id } -> true
            else -> false
        }

        if (!hasAccess) {
            sender.execute(SendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ '${group.name}'"))
            return
        }

        val alreadySubscribed = subscriptionService.isSubscribed(dbUser, group)
        if (alreadySubscribed) {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—É '${group.name}'."))
            return
        }

        val subscribed = subscriptionService.subscribe(dbUser, group)
        if (subscribed) {
            sender.execute(SendMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É '${group.name}'."))
        } else {
            sender.execute(SendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É '${group.name}'."))
        }
    }
}
