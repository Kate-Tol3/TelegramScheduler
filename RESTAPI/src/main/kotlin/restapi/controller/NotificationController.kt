package org.example.restapi.controller

import org.example.messaging.dto.NotificationMessage
import org.example.restapi.dto.ScheduleNotificationRequest
import org.example.restapi.dto.SendImmediateNotificationRequest

import org.example.restapi.kafka.NotificationKafkaProducer
import org.springframework.web.bind.annotation.*

@RestController
@RequestMapping("/api/notifications")
class NotificationController(
    private val kafkaProducer: NotificationKafkaProducer
) {

    /**
     * üì§ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Kafka (notification-send), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ BotCore
     */
    @PostMapping("/immediate")
    fun sendImmediate(@RequestBody request: SendImmediateNotificationRequest) {
        val message = NotificationMessage(
            text = request.text,
            groupName = request.groupName,
            chatId = null,
            sendToUsers = request.private,
            sendToGroup = request.chat,
            type = "IMMEDIATE" // –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø
        )
        kafkaProducer.sendNotification(message)
    }

    /**
     * ‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ScheduleNotificationRequest –≤ Kafka (notification-schedule), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ BotCore
     */
    @PostMapping("/schedule")
    fun schedule(@RequestBody request: ScheduleNotificationRequest) {
        kafkaProducer.sendScheduled(request)
    }
}
