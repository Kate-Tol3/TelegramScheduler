package org.example.bot

import jakarta.annotation.PostConstruct
import org.example.bot.commands.*
import org.example.bot.sender.NotificationSender
import org.example.bot.service.BotContextService
import org.example.storage.service.*
import org.springframework.stereotype.Component
import org.telegram.telegrambots.extensions.bots.commandbot.TelegramLongPollingCommandBot
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatAdministrators
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.ChatMemberUpdated
import org.telegram.telegrambots.meta.api.objects.Update
import java.util.*
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault


@Component
class TelegramBot(
    private val botProperties: BotProperties,
    private val userService: UserService,
    private val groupService: GroupService,
    private val subscriptionService: SubscriptionService,
    private val templateService: TemplateService,
    private val eventService: EventService,
    private val scheduledNotificationService: ScheduledNotificationService,
    private val notificationSender: NotificationSender,
    private val botContextService: BotContextService,
) : TelegramLongPollingCommandBot() {

    override fun getBotUsername(): String = botProperties.username
    override fun getBotToken(): String = botProperties.token

    @PostConstruct
    fun registerCommands() {
        register(StartCommand(groupService, subscriptionService, userService))
        register(HelpCommand())

        register(CreateGroupCommand(groupService, subscriptionService, userService))
        register(DeleteGroupCommand(groupService, subscriptionService, scheduledNotificationService, userService))
        register(ListGroupsCommand(groupService, userService))

        register(SubscribeCommand(userService, groupService, subscriptionService))
        register(UnsubscribeCommand(userService, groupService, subscriptionService))
        register(MySubscriptionsCommand(userService, subscriptionService))
        register(SubscribeAllCommand(userService, groupService, subscriptionService))
        register(MyChatsCommand(groupService))

        register(GrantAccessCommand(userService, groupService))
        register(RevokeAccessCommand(userService, groupService, subscriptionService))
        register(GrantNotifyRightsCommand(userService, groupService))
        register(RevokeNotifyRightsCommand(userService, groupService))
        register(AllowedUsersCommand(groupService, userService))
        register(NotifiersCommand(groupService, userService))

        register(ListTemplatesCommand(templateService))

        register(
            NotifyImmediateCommand(
                eventService, templateService, userService,
                groupService, subscriptionService, notificationSender
            )
        )

        register(
            NotifyScheduleCommand(
                eventService, templateService, scheduledNotificationService,
                groupService, userService, subscriptionService
            )
        )

        registerBotMenuCommands()
    }

    override fun processNonCommandUpdate(update: Update) {
        if (update.hasMyChatMember()) {
            handleMyChatMemberUpdate(update.myChatMember)
            return
        }

        if (update.hasCallbackQuery()) {
            processCallbackQuery(update)
            return
        }

        val message = update.message ?: return
        val chatId = message.chatId.toString()
        val text = message.text ?: return

        if (!text.startsWith("/")) {
            execute(SendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."))
        }
    }

    private fun processCallbackQuery(update: Update) {
        val callback = update.callbackQuery ?: return
        val data = callback.data ?: return
        val user = callback.from
        val message = callback.message ?: return
        val chatId = message.chatId.toString()

        if (data.startsWith("subscribe_group:")) {
            val groupId = data.removePrefix("subscribe_group:")
            val group = try {
                groupService.findById(UUID.fromString(groupId))
            } catch (e: IllegalArgumentException) {
                execute(
                    AnswerCallbackQuery.builder()
                        .callbackQueryId(callback.id)
                        .text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.")
                        .showAlert(true)
                        .build()
                )
                return
            }

            if (group == null) {
                execute(
                    AnswerCallbackQuery.builder()
                        .callbackQueryId(callback.id)
                        .text("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                        .showAlert(true)
                        .build()
                )
                return
            }

            val userModel = userService.resolveUser(user)
            val subscribed = subscriptionService.subscribe(userModel, group)

            val feedback = if (subscribed) {
                "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É '${group.name}'"
            } else {
                "‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—É '${group.name}'"
            }

            execute(
                AnswerCallbackQuery.builder()
                    .callbackQueryId(callback.id)
                    .text(feedback)
                    .showAlert(false)
                    .build()
            )

            if (!message.chat.isUserChat) {
                execute(SendMessage(chatId, feedback))
            }
        }
    }

    override fun processInvalidCommandUpdate(update: Update?) {
        val message = update?.message ?: return
        val chatId = message.chatId.toString()
        val command = message.text ?: return

        val reply = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        execute(SendMessage(chatId, reply))
    }

    private fun handleMyChatMemberUpdate(memberUpdate: ChatMemberUpdated) {
        val chat = memberUpdate.chat
        val chatId = chat.id.toString()
        val newStatus = memberUpdate.newChatMember.status

        println("üì• my_chat_member: newStatus = $newStatus, chatId = $chatId")

        when (newStatus) {
            "left", "kicked" -> {
                val group = groupService.findByChatId(chatId)
                println("üîç –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${group?.name}")

                if (group != null) {
                    println("üóë –ë–æ—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —á–∞—Ç–∞ '${chat.title}', —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É '${group.name}'")
                    scheduledNotificationService.deleteAllByGroup(group)
                    subscriptionService.deleteAllByGroup(group)
                    groupService.delete(group)
                }
            }

            "member", "administrator" -> {
                val title = chat.title ?: "–≥—Ä—É–ø–ø–∞-${chatId.takeLast(6)}"
                val existing = groupService.findByChatId(chatId)
                println("‚ûï –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≥—Ä—É–ø–ø–∞ –¥–ª—è $chatId ‚Üí ${existing != null}")

                if (existing == null) {
                    val group = groupService.createGroup(
                        name = title,
                        description = "–ì—Ä—É–ø–ø–∞ Telegram $title",
                        chatId = chatId
                    )

                    try {
                        val admins = execute(GetChatAdministrators(chatId))
                        for (admin in admins) {
                            val tgUser = admin.user
                            if (!tgUser.isBot) {
                                val user = userService.resolveUser(tgUser)
                                subscriptionService.subscribe(user, group)
                            }
                        }
                        println("‚úÖ –ì—Ä—É–ø–ø–∞ '$title' —Å–æ–∑–¥–∞–Ω–∞ –∏ –∞–¥–º–∏–Ω—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã")
                    } catch (e: Exception) {
                        println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤: ${e.message}")
                    }
                }
            }
        }
    }

    private fun registerBotMenuCommands() {
        val commands = listOf(
            BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand("help", "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"),
            BotCommand("subscribe", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É"),
            BotCommand("unsubscribe", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã"),
            BotCommand("list_groups", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã"),
            BotCommand("my_subscriptions", "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
            BotCommand("notify_immediate", "–°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
            BotCommand("notify_schedule", "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
            BotCommand("create_group", "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"),
            BotCommand("delete_group", "–£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É"),
            BotCommand("subscribe_all", "–ü–æ–¥–ø–∏—Å–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"),
            BotCommand("grant_access", "–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ"),
            BotCommand("revoke_access", "–û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ"),
            BotCommand("grant_notify_rights", "–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
            BotCommand("revoke_notify_rights", "–û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
            BotCommand("my_chats", "–ú–æ–∏ —á–∞—Ç—ã"),
            BotCommand("list_templates", "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        )

        execute(SetMyCommands(commands, BotCommandScopeDefault(), null))
    }

}
